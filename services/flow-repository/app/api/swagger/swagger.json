{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the API for the Open Integration Hub Microservice \"Flow Repository\"\n[https://openintegrationhub.org](https://openintegrationhub.org)\n",
    "version": "1.0.0",
    "title": "Flow Repository",
    "termsOfService": "https://github.com/openintegrationhub/openintegrationhub/blob/master/LICENSE/",
    "contact": {
      "email": "hschmidt@wice.de"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "flows",
      "description": "Flow management",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://openintegrationhub.org"
      }
    }
  ],
  "paths": {
    "/flows": {
      "get": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Retrieve all flows associated with the current user from the repository",
        "description": "This will only return Flows that are either directly associated with the user, or that are associated with a tenant that the user is also a member of. Requires the 'flows.read' permissions.",
        "operationId": "getFlows",
        "parameters": [
          {
            "name": "page[size]",
            "in": "query",
            "description": "Amount of flows per page returned. Default is 10.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Number of the page to be returned. Default is 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter results by flow status. Accepts either string ('active' and 'inactive') or integer (1 or 0)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter results by flow type (ordinary, long_running)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user]",
            "in": "query",
            "description": "Filter by user. Works for admin or users with same tenant.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the result by one property. Supported: createdAt, updatedAt and name. Prefix field name with - for reversed sort order (DESC) i.e. sort=-updatedAt. Default sorting is by id ASC",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search flows by a word or a phrase contained in the flow description OR in the flow name (case-insensitive). Behavior is similar to operator LIKE in SQL but case insensitive.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of flows.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flow"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Add a new flow to the repository",
        "description": "This requires the 'flows.write' permissions. The new Flow will automatically be associated with the current user in the owners array, allowing editing and viewing by this user irrespective of tenancies.",
        "operationId": "addFlow",
        "responses": {
          "201": {
            "description": "The created Flow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flow"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MutableFlow"
              }
            }
          },
          "description": "A Flow object to be added to the repository.",
          "required": true
        }
      }
    },
    "/flows/{id}": {
      "get": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Find Flow by ID",
        "description": "Returns a single Flow by its ID, if the user is authorized to see it. This requires the 'flows.read' permission",
        "operationId": "getFlowById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the flow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flow"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Flow with this id was found."
          }
        }
      },
      "delete": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Deletes a flow",
        "description": "Entirely deletes a Flow from the repository. This cannot be reverted. Requires the 'flows.write' permission.",
        "operationId": "deleteFlow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow id to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow was successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No Flow with this id was found."
          },
          "409": {
            "description": "Flow is currently not inactive. Only stopped, inactive flows may be deleted."
          }
        }
      },
      "patch": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "summary": "Update an existing flow",
        "description": "The id is used to match the existing Flow that will be updated. Requires the 'flows.write' permission.",
        "operationId": "updateFlow",
        "responses": {
          "200": {
            "description": "The updated Flow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flow"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Flow not found"
          },
          "409": {
            "description": "Flow is currently not inactive. Only stopped, inactive flows may be updated."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MutableFlow"
              }
            }
          },
          "description": "Flow object containing the desired new values.",
          "required": true
        }
      }
    },
    "/flows/{id}/start": {
      "post": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Start a flow",
        "description": "Initiates the flow's integration process by publishing an appropriate event to the event bus. Requires the 'flows.control' permission.",
        "operationId": "startFlow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow to start, must be a valid MongoDB ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id and new status of the flow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "5c99ec7e5ed40d3e7512cffa"
                        },
                        "status": {
                          "type": "string",
                          "example": "starting"
                        }
                      }
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format."
          },
          "403": {
            "description": "User is not authorised to start flows."
          },
          "404": {
            "description": "No Flow with this id was found."
          },
          "409": {
            "description": "Flow is currently not inactive. Only inactive flows can be started."
          }
        }
      }
    },
    "/flows/{id}/stop": {
      "post": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Stop a flow",
        "description": "Stops the flow's integration process by publishing an appropriate event to the event bus. Requires the 'flows.control' permission.",
        "operationId": "stopFlow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow to stop, must be a valid MongoDB ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns id and new status of the stopped flow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "5c99ec7e5ed40d3e7512cffa"
                        },
                        "status": {
                          "type": "string",
                          "example": "stopping"
                        }
                      }
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format."
          },
          "403": {
            "description": "User is not authorised to stop flows."
          },
          "404": {
            "description": "No Flow with this id was found."
          },
          "409": {
            "description": "Flow is currently not active. Only active flows can be stopped."
          }
        }
      }
    },
    "/flows/{id}/steps/{step_id}/logs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Get flow step's logs",
        "description": "Returns logs produced by a certain step of the flow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow, must be a valid MongoDB ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "step_id",
            "in": "path",
            "description": "ID of a step of a flow",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of log items to return.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "Token to get a certain page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns array of log items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "example": "2019-11-08T11:53:17.497Z"
                          },
                          "message": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "msg": {
                                    "type": "string"
                                  }
                                }
                              }
                            ],
                            "example": "Some logged string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "pageSize": {
                          "type": "number",
                          "description": "Number of log items per page",
                          "default": 1000,
                          "example": 1000
                        },
                        "nextPageToken": {
                          "type": "string",
                          "description": "Token for getting the next page",
                          "example": "some-long-token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format."
          },
          "403": {
            "description": "User is not authorised to get logs."
          },
          "404": {
            "description": "No Flow with this id was found."
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "x-swagger-router-controller": "healthcheck",
        "security": [],
        "tags": [
          "healthcheck"
        ],
        "summary": "Performs a healthcheck",
        "description": "This will return 200 and a JSON object with relevant status information when the service is running and healthy.",
        "responses": {
          "200": {
            "description": "An object detailing the status of the service and the involved components.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "pass"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "MongoDB": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "pass"
                            }
                          }
                        },
                        "queue": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "pass"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "At least one component is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "MongoDB": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "fail"
                            }
                          }
                        },
                        "queue": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "pass"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the Flow Repository",
    "url": "https://github.com/openintegrationhub"
  },
  "servers": [
    {
      "url": "http://flow-repository.openintegrationhub.com/"
    },
    {
      "url": "http://localhost:3001/"
    }
  ],
  "components": {
    "requestBodies": {
      "addTenantToFlow": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "description": "ID of the tenant",
                  "type": "string",
                  "format": "string"
                }
              }
            }
          }
        }
      },
      "addEdge": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "mapper_type": {
                  "description": "mapper type of the edge",
                  "type": "string",
                  "format": "string"
                },
                "condition": {
                  "description": "condition of the edge",
                  "type": "string",
                  "format": "string"
                },
                "mapper_to": {
                  "description": "where the edge leads to",
                  "type": "string",
                  "format": "string"
                },
                "mapper_subject": {
                  "description": "name of the mapper",
                  "type": "string"
                },
                "mapper_textbody": {
                  "description": "Mapper details like Adress. Street",
                  "type": "string"
                },
                "source": {
                  "description": "Name of the edge's source",
                  "type": "string"
                },
                "target": {
                  "description": "Name of the edge's target",
                  "type": "string"
                }
              },
              "required": [
                "mapper_type",
                "condition"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Enter the bearer token received by IAM"
      }
    },
    "schemas": {
      "MutableFlow": {
        "type": "object",
        "required": [
          "name",
          "graph",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "SnazzyToCodeComponent"
          },
          "description": {
            "type": "string",
            "example": "This flow polls for persons and posts them on webhoo.site."
          },
          "tenant": {
            "type": "string"
          },
          "graph": {
            "$ref": "#/components/schemas/FlowGraph"
          },
          "type": {
            "type": "string",
            "description": "Flow type",
            "enum": [
              "ordinary",
              "realtime"
            ],
            "example": "ordinary"
          },
          "cron": {
            "type": "string",
            "description": "A cron string describing the interval at which this flow is run. If unset, the flow uses webhooks instead",
            "example": "* /2 * * * *"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Owner"
            }
          }
        }
      },
      "Flow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableFlow"
          },
          {
            "type": "object",
            "required": [
              "id",
              "createdAt",
              "updatedAt"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "description": "Flow status, set automatically in response to start/stop commands",
                "enum": [
                  "active",
                  "inactive",
                  "starting",
                  "stopping"
                ],
                "example": "inactive"
              },
              "createdAt": {
                "type": "string",
                "description": "Timestamp of flow creation",
                "format": "date-time",
                "example": "2019-07-30T12:52:45.957Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "Timestamp of most recent flow update",
                "format": "date-time",
                "example": "2019-07-30T12:52:45.957Z"
              }
            }
          }
        ]
      },
      "FlowGraph": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "description": "An array of all components involved in this flow",
            "items": {
              "type": "object",
              "required": [
                "id",
                "command"
              ],
              "example": [
                {
                  "id": "step_1",
                  "componentId": "string",
                  "name": "snazzy adapter for oih",
                  "credentials_id": "507f1f77bcf86cd799439011",
                  "function": "getPersonsPolling",
                  "description": "New description in progress"
                },
                {
                  "id": "step_2",
                  "componentId": "string",
                  "name": "code_component",
                  "function": "execute",
                  "description": "",
                  "fields": {
                    "code": "function* run() {console.log('Calling external URL');yield request.post({uri: 'http://webhook.site/debc8244-3ca0-4449-af2b-e346c4f57b85', body: msg.body, json: true});}"
                  }
                }
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of this node, which will be referenced by edges"
                },
                "componentId": {
                  "type": "string",
                  "description": "The component repository id of the component (e.g. adapter/transformer) to be used in this step."
                },
                "credentials_id": {
                  "type": "string",
                  "description": "A secret service id of a secret containing credentials for this node."
                },
                "function": {
                  "type": "string",
                  "description": "The function that the component will be executing."
                },
                "name": {
                  "type": "string",
                  "description": "Descriptive name of this node"
                },
                "description": {
                  "type": "string"
                },
                "fields": {
                  "type": "object",
                  "description": "Optional arguments passed on to the component"
                }
              }
            }
          },
          "edges": {
            "type": "array",
            "description": "An array of edges linking nodes together, determining the order in which nodes are activated",
            "items": {
              "type": "object",
              "required": [
                "source",
                "target"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "config": {
                  "type": "object",
                  "properties": {
                    "condition": {
                      "type": "string"
                    },
                    "mapper": {
                      "type": "object"
                    }
                  }
                },
                "source": {
                  "type": "string",
                  "description": "The source node of this edge, referring to the id field of a node",
                  "example": "step_1"
                },
                "target": {
                  "type": "string",
                  "description": "The target node of this edge, referring to the id field of a node",
                  "example": "step_2"
                }
              }
            }
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page (1-based numbering)"
          },
          "perPage": {
            "type": "integer",
            "description": "Number of objects per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of objects"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      },
      "Owner": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "External id of the owner"
          },
          "type": {
            "type": "string",
            "description": "Type to discriminate between user or tenant"
          }
        }
      }
    }
  }
}
